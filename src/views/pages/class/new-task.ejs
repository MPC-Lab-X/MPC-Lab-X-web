<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../../components/head.ejs") %>
  <script src="/js/class.js"></script>
  <title>MPC Lab | New Task</title>
</head>

<body>
  <%- include("../../components/classroom-sidebar.ejs", { classId }) %>

  <main class="sm:ml-64 p-6">
    <h1 class="text-3xl font-semibold mb-6">Create New Task</h1>

    <!-- Task sections header -->
    <div class="flex justify-between items-center mb-6">
      <h2 class="text-xl font-bold">Task Sections</h2>
      <button id="add-section" class="bg-primary-500 text-white px-4 py-2 rounded hover:bg-primary-400 transition duration-200">New Task Section</button>
    </div>

    <%- include("../../components/task-sections-manager.ejs") %>
    <%- include("../../components/problem-type-selector.ejs") %>

    <!-- Task settings form -->
    <div class="mt-8 p-6 bg-background-50 shadow-md rounded-lg">
      <h2 class="text-xl font-bold mb-4">Task Settings</h2>

      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Task Name</label>
        <input id="task-name" type="text" class="p-3 border border-gray-300 rounded-md w-full mt-1" placeholder="Enter task name" />
      </div>

      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Task Description</label>
        <textarea id="task-description" class="p-3 border border-gray-300 rounded-md w-full mt-1" placeholder="Enter task description"></textarea>
      </div>

      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Unique Questions for Each Student</label>
        <label class="inline-flex items-center mt-1">
          <input id="unique-questions" type="checkbox" checked class="toggle-checkbox appearance-none w-10 h-5 bg-gray-300 rounded-full checked:bg-green-500 transition-all duration-200 relative">
          <span class="ml-3">Enable</span>
        </label>
      </div>

      <div class="mb-4">
        <label class="block text-sm font-medium text-gray-700">Randomize Questions Order</label>
        <label class="inline-flex items-center mt-1">
          <input id="randomize-questions" type="checkbox" class="toggle-checkbox appearance-none w-10 h-5 bg-gray-300 rounded-full checked:bg-green-500 transition-all duration-200 relative">
          <span class="ml-3">Enable</span>
        </label>
      </div>

      <button id="create-task" class="bg-primary-500 text-white px-4 py-2 rounded hover:bg-primary-400 transition duration-200">Create Task</button>
    </div>
  </main>

  <script>
    // Initialize classroom module
    const classroom = new Classroom(app);

    // Fetch class details
    classroom.getClass("<%= classId %>").then((response) => {
      if (response.status === "success") {
        const students = response.data.students.filter((student) => !student.deleted);

        document.title = `MPC Lab | New Task - ${response.data.name}`;
        document.getElementById("classroom-name").textContent = response.data.name;

        const studentsCount = document.getElementById("students-count");
        const adminsCount = document.getElementById("admins-count");
        studentsCount.textContent = students.length;
        adminsCount.textContent = response.data.admins.length;
        studentsCount.classList.remove("hidden");
        adminsCount.classList.remove("hidden");
      } else {
        // Handle errors
        if (response.error.code === "CLASS_NOT_FOUND" || response.error.code === "INVALID_CLASS_ID") {
          app.location.showNotFound();
        } else if (response.error.code === "ACCESS_DENIED") {
          app.location.showForbidden();
        }
      }
    });

    let taskSectionsManager;

    // Fetch problem types
    fetch(`${app.apiURL}/problems`)
      .then((response) => response.json())
      .then((data) => {
        const problemTypeSelector = new ProblemTypeSelector(
          document.getElementById("problem-type-selector"),
          data.data
        );

        taskSectionsManager = new TaskSectionsManager(
          document.getElementById("task-sections-manager"),
          data.data
        );

        // Add section button event listener
        const addSectionButton = document.getElementById("add-section");
        addSectionButton.addEventListener("click", () => {
          problemTypeSelector.show().then((problemPath) => {
            taskSectionsManager.newSection(problemPath, (topicId) => {
              problemTypeSelector.show().then((problemPath) => {
                taskSectionsManager.editSection(topicId, problemPath);
              }).catch((error) => {
                /* Selector closed */
              });
            });
          }).catch((error) => {
            /* Selector closed */
          });
        });
      });

    // Create task event listener
    const createTaskButton = document.getElementById("create-task");
    createTaskButton.addEventListener("click", async () => {
      const taskName = document.getElementById("task-name").value;
      const taskDescription = document.getElementById("task-description").value;
      const uniqueQuestions = document.getElementById("unique-questions").checked;
      const randomizeQuestions = document.getElementById("randomize-questions").checked;
      const topics = taskSectionsManager.getTopics();

      const classId = "<%= classId %>";

      // Validate topics
      if (topics.length === 0) {
        app.ui.notification(
          "alert",
          "Please add at least one task section.",
          "error",
          createTaskButton.parentElement,
          "create-task"
        );
        return;
      }

      const options = {
        isIndividualTask: uniqueQuestions,
        shuffle: randomizeQuestions,
        topics,
      };

      // Create task API call
      classroom.createTask(classId, taskName, taskDescription, options).then((response) => {
        if (response.status === "success") {
          app.ui.notification(
            "alert",
            response.message,
            "success",
            createTaskButton.parentElement,
            "create-task"
          );
          // Redirect to task page after a delay
          setTimeout(() => {
            app.location.redirect(`/classrooms/${classId}/tasks/${response.data.taskId}`);
          }, 2000);
        } else {
          app.ui.notification(
            "alert",
            response.message,
            "error",
            createTaskButton.parentElement,
            "create-task"
          );
        }
      });
    });
  </script>
</body>

</html>