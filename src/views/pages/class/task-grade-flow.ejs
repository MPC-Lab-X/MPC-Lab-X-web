<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../../components/head.ejs") %>
  <%- include("../../components/libraries.ejs", { desmosApiKey }) %>
  <script src="/js/class.js"></script>
  <title>MPC Lab | Flow Mode</title>
</head>

<body class="overflow-y-hidden relative">
  <!-- Exit Flow Mode Button -->
  <div id="exit-flow-mode" class="fixed top-4 right-4 z-50 bg-black bg-opacity-70 text-white px-4 py-2 rounded-md cursor-pointer hover:bg-opacity-80">
    <span>Exit Flow Mode (<b>Esc</b>)</span>
  </div>

  <!-- Progress Bar -->
  <div class="fixed top-0 left-0 w-full h-1 z-50">
    <div id="progress-bar" class="bg-primary-600 h-1" style="width: 0%;"></div>
    <div class="absolute top-1 left-4 text-sm text-gray-700">
      <span id="graded-students">0</span>/<span id="total-students">0</span> students graded | current student: <b><span id="current-student-number"></span> (<span id="current-student-name-top"></span>)</b>
    </div>
  </div>

  <main class="p-6 h-screen flex justify-center items-center">
    <!-- Previous Student Button -->
    <div class="fixed top-1/2 left-4 transform -translate-y-1/2 z-50">
      <button id="previous-student" class="bg-black bg-opacity-70 text-white w-12 h-12 rounded-full flex items-center justify-center cursor-pointer hover:bg-opacity-80">
        &#8592;
      </button>
    </div>

    <!-- Main Content Section -->
    <section class="w-full max-w-5xl bg-gray-50 rounded-lg shadow-md p-6 h-full overflow-y-auto">
      <div class="space-y-6 mb-6">
        <h2 id="current-student-name" class="text-2xl font-semibold"></h2>
        <button id="mark-graded" class="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-500">
          Mark as Graded & Next (&#8629; Enter)
        </button>
      </div>

      <hr class="border-t border-gray-300 mb-6" />

      <!-- Problems Section -->
      <%- include("../../components/problems.ejs") %>

      <hr class="border-t border-gray-300 mb-6" />

      <div class="space-y-6">
        <button id="mark-graded-bottom" class="bg-primary-600 text-white px-4 py-2 rounded-lg hover:bg-primary-500">
          Mark as Graded & Next (&#8629; Enter)
        </button>
        <button id="next-student-bottom" class="bg-secondary-600 text-white px-4 py-2 rounded-lg hover:bg-secondary-500">
          Next Ungraded (&#8594;)
        </button>
      </div>
    </section>

    <!-- Next Student Button -->
    <div class="fixed top-1/2 right-4 transform -translate-y-1/2 z-50">
      <button id="next-student" class="bg-black bg-opacity-70 text-white w-12 h-12 rounded-full flex items-center justify-center cursor-pointer hover:bg-opacity-80">
        &#8594;
      </button>
    </div>
  </main>

  <script>
    const classroom = new Classroom(app);

    // Fetch the task and associated student data
    classroom.getTask("<%= taskId %>").then((response) => {
      if (response.status === "success") {
        const userTasks = response.data.userTasks;

        classroom.getClass("<%= classId %>").then((response) => {
          if (response.status === "success") {
            const classStudents = response.data.students;
            const taskStudents = userTasks.map((userTask) => {
              const student = classStudents.find((student) => student.studentNumber === userTask.studentNumber);
              return {
                ...student,
                graded: userTasks.find((userTask) => userTask.studentNumber === student.studentNumber).graded
              };
            });

            // Update total students count
            document.getElementById("total-students").textContent = taskStudents.length;

            const gradeQueue = new GradeCircularQueue(taskStudents);

            // Exit Flow Mode Handler
            document.getElementById("exit-flow-mode").addEventListener("click", () => {
              app.location.redirect(`/classrooms/<%= classId %>/tasks/<%= taskId %>/grade`);
            });

            // Mark Graded Handlers
            document.getElementById("mark-graded").onclick = () => {
              gradeQueue.markGraded();
            };
            document.getElementById("mark-graded-bottom").onclick = () => {
              gradeQueue.markGraded();
            };

            // Previous and Next Student Handlers
            const previousStudent = () => {
              gradeQueue.previousStudent();
            };
            document.getElementById("previous-student").addEventListener("click", previousStudent);

            const nextStudent = () => {
              gradeQueue.nextStudent();
            };
            document.getElementById("next-student").addEventListener("click", nextStudent);
            document.getElementById("next-student-bottom").addEventListener("click", nextStudent);
            document.getElementById("previous-student").addEventListener("click", previousStudent);

            // Keyboard Shortcuts
            document.addEventListener("keydown", (event) => {
              if (event.key === "ArrowRight") {
                nextStudent();
              } else if (event.key === "ArrowLeft") {
                previousStudent();
              } else if (event.key === "Enter") {
                gradeQueue.markGraded();
              } else if (event.key === "Escape") {
                app.location.redirect(`/classrooms/<%= classId %>/tasks/<%= taskId %>/grade`);
              }
            });
          } else {
            if (response.error.code === "CLASS_NOT_FOUND" || response.error.code === "INVALID_CLASS_ID") {
              app.location.showNotFound();
            } else if (response.error.code === "ACCESS_DENIED") {
              app.location.showForbidden();
            }
          }
        });
      } else {
        if (response.error.code === "TASK_NOT_FOUND" || response.error.code === "CLASS_NOT_FOUND") {
          app.location.showNotFound();
        } else if (response.error.code === "ACCESS_DENIED") {
          app.location.showForbidden();
        }
      }
    });

    const problems = new Problems(document.getElementById("problems"));

    class GradeCircularQueue {
      constructor(students) {
        this.students = students;
        this.queue = [];
        this.index = 0;

        // Populate the queue with ungraded students
        this.students.forEach((student, index) => {
          if (!student.graded) {
            this.queue.push(index);
          }
        });

        // Show the first student or alert if all are graded
        if (this.queue.length > 0) {
          document.getElementById("graded-students").textContent = this.students.filter((student) => student.graded).length;
          document.getElementById("progress-bar").style.width = `${(this.students.filter((student) => student.graded).length / this.students.length) * 100}%`;
          this.showStudent(this.queue[0]);
        } else {
          app.ui.alert("All students have been graded.", "info", 2000);
          setTimeout(() => {
            app.location.redirect(`/classrooms/<%= classId %>/tasks/<%= taskId %>/grade`);
          }, 2000);
        }
      }

      // Show the current student based on the index
      showStudent(index) {
        this.index = index;
        const student = this.students[index];
        document.getElementById("current-student-name-top").textContent = student.name;
        document.getElementById("current-student-number").textContent = student.studentNumber;
        document.getElementById("current-student-name").textContent = student.name;

        getCachedTaskProblems("<%= taskId %>", student.studentNumber).then((response) => {
          if (response.status === "success") {
            problems.render(response.data);
          } else {
            app.ui.alert(response.message, "error", 5000);
          }
        });
      }

      // Mark the current student as graded
      async markGraded() {
        const student = this.students[this.index];
        student.graded = true;
        this.queue.shift();

        // Update graded student count and progress bar
        document.getElementById("graded-students").textContent = this.students.filter((student) => student.graded).length;
        document.getElementById("progress-bar").style.width = `${(this.students.filter((student) => student.graded).length / this.students.length) * 100}%`;

        await classroom.updateGradingStatus("<%= taskId %>", student.studentNumber, true);

        if (this.queue.length > 0) {
          this.showStudent(this.queue[0]);
        } else {
          app.ui.alert("All students have been graded.", "info", 2000);
          setTimeout(() => {
            app.location.redirect(`/classrooms/<%= classId %>/tasks/<%= taskId %>/grade`);
          }, 2000);
        }
      }

      // Move to the next student in the queue
      nextStudent() {
        if (this.queue.length > 0) {
          this.queue.push(this.queue.shift());
          this.showStudent(this.queue[0]);
        }
      }

      // Move to the previous student in the queue
      previousStudent() {
        if (this.queue.length > 0) {
          this.queue.unshift(this.queue.pop());
          this.showStudent(this.queue[0]);
        }
      }
    }

    const taskCache = new Map();

    function getCachedTaskProblems(taskId, studentNumber) {
      const cacheKey = `${taskId}-${studentNumber}`;
      if (taskCache.has(cacheKey)) {
        return Promise.resolve(taskCache.get(cacheKey));
      }
      return classroom.getTaskProblems(taskId, studentNumber).then((response) => {
        if (response.status === "success") {
          taskCache.set(cacheKey, response);
        }
        return response;
      });
    }
  </script>
</body>

</html>